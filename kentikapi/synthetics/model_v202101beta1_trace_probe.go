/*
 * Synthetics Monitoring API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package synthetics

import (
	"encoding/json"
)

// V202101beta1TraceProbe struct for V202101beta1TraceProbe
type V202101beta1TraceProbe struct {
	AsPath     *[]int32                `json:"asPath,omitempty"`
	Completed  *bool                   `json:"completed,omitempty"`
	HopCount   *int32                  `json:"hopCount,omitempty"`
	RegionPath *[]string               `json:"regionPath,omitempty"`
	SitePath   *[]int32                `json:"sitePath,omitempty"`
	Hops       *[]V202101beta1TraceHop `json:"hops,omitempty"`
}

// NewV202101beta1TraceProbe instantiates a new V202101beta1TraceProbe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV202101beta1TraceProbe() *V202101beta1TraceProbe {
	this := V202101beta1TraceProbe{}
	return &this
}

// NewV202101beta1TraceProbeWithDefaults instantiates a new V202101beta1TraceProbe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV202101beta1TraceProbeWithDefaults() *V202101beta1TraceProbe {
	this := V202101beta1TraceProbe{}
	return &this
}

// GetAsPath returns the AsPath field value if set, zero value otherwise.
func (o *V202101beta1TraceProbe) GetAsPath() []int32 {
	if o == nil || o.AsPath == nil {
		var ret []int32
		return ret
	}
	return *o.AsPath
}

// GetAsPathOk returns a tuple with the AsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1TraceProbe) GetAsPathOk() (*[]int32, bool) {
	if o == nil || o.AsPath == nil {
		return nil, false
	}
	return o.AsPath, true
}

// HasAsPath returns a boolean if a field has been set.
func (o *V202101beta1TraceProbe) HasAsPath() bool {
	if o != nil && o.AsPath != nil {
		return true
	}

	return false
}

// SetAsPath gets a reference to the given []int32 and assigns it to the AsPath field.
func (o *V202101beta1TraceProbe) SetAsPath(v []int32) {
	o.AsPath = &v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *V202101beta1TraceProbe) GetCompleted() bool {
	if o == nil || o.Completed == nil {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1TraceProbe) GetCompletedOk() (*bool, bool) {
	if o == nil || o.Completed == nil {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *V202101beta1TraceProbe) HasCompleted() bool {
	if o != nil && o.Completed != nil {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *V202101beta1TraceProbe) SetCompleted(v bool) {
	o.Completed = &v
}

// GetHopCount returns the HopCount field value if set, zero value otherwise.
func (o *V202101beta1TraceProbe) GetHopCount() int32 {
	if o == nil || o.HopCount == nil {
		var ret int32
		return ret
	}
	return *o.HopCount
}

// GetHopCountOk returns a tuple with the HopCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1TraceProbe) GetHopCountOk() (*int32, bool) {
	if o == nil || o.HopCount == nil {
		return nil, false
	}
	return o.HopCount, true
}

// HasHopCount returns a boolean if a field has been set.
func (o *V202101beta1TraceProbe) HasHopCount() bool {
	if o != nil && o.HopCount != nil {
		return true
	}

	return false
}

// SetHopCount gets a reference to the given int32 and assigns it to the HopCount field.
func (o *V202101beta1TraceProbe) SetHopCount(v int32) {
	o.HopCount = &v
}

// GetRegionPath returns the RegionPath field value if set, zero value otherwise.
func (o *V202101beta1TraceProbe) GetRegionPath() []string {
	if o == nil || o.RegionPath == nil {
		var ret []string
		return ret
	}
	return *o.RegionPath
}

// GetRegionPathOk returns a tuple with the RegionPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1TraceProbe) GetRegionPathOk() (*[]string, bool) {
	if o == nil || o.RegionPath == nil {
		return nil, false
	}
	return o.RegionPath, true
}

// HasRegionPath returns a boolean if a field has been set.
func (o *V202101beta1TraceProbe) HasRegionPath() bool {
	if o != nil && o.RegionPath != nil {
		return true
	}

	return false
}

// SetRegionPath gets a reference to the given []string and assigns it to the RegionPath field.
func (o *V202101beta1TraceProbe) SetRegionPath(v []string) {
	o.RegionPath = &v
}

// GetSitePath returns the SitePath field value if set, zero value otherwise.
func (o *V202101beta1TraceProbe) GetSitePath() []int32 {
	if o == nil || o.SitePath == nil {
		var ret []int32
		return ret
	}
	return *o.SitePath
}

// GetSitePathOk returns a tuple with the SitePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1TraceProbe) GetSitePathOk() (*[]int32, bool) {
	if o == nil || o.SitePath == nil {
		return nil, false
	}
	return o.SitePath, true
}

// HasSitePath returns a boolean if a field has been set.
func (o *V202101beta1TraceProbe) HasSitePath() bool {
	if o != nil && o.SitePath != nil {
		return true
	}

	return false
}

// SetSitePath gets a reference to the given []int32 and assigns it to the SitePath field.
func (o *V202101beta1TraceProbe) SetSitePath(v []int32) {
	o.SitePath = &v
}

// GetHops returns the Hops field value if set, zero value otherwise.
func (o *V202101beta1TraceProbe) GetHops() []V202101beta1TraceHop {
	if o == nil || o.Hops == nil {
		var ret []V202101beta1TraceHop
		return ret
	}
	return *o.Hops
}

// GetHopsOk returns a tuple with the Hops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V202101beta1TraceProbe) GetHopsOk() (*[]V202101beta1TraceHop, bool) {
	if o == nil || o.Hops == nil {
		return nil, false
	}
	return o.Hops, true
}

// HasHops returns a boolean if a field has been set.
func (o *V202101beta1TraceProbe) HasHops() bool {
	if o != nil && o.Hops != nil {
		return true
	}

	return false
}

// SetHops gets a reference to the given []V202101beta1TraceHop and assigns it to the Hops field.
func (o *V202101beta1TraceProbe) SetHops(v []V202101beta1TraceHop) {
	o.Hops = &v
}

func (o V202101beta1TraceProbe) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AsPath != nil {
		toSerialize["asPath"] = o.AsPath
	}
	if o.Completed != nil {
		toSerialize["completed"] = o.Completed
	}
	if o.HopCount != nil {
		toSerialize["hopCount"] = o.HopCount
	}
	if o.RegionPath != nil {
		toSerialize["regionPath"] = o.RegionPath
	}
	if o.SitePath != nil {
		toSerialize["sitePath"] = o.SitePath
	}
	if o.Hops != nil {
		toSerialize["hops"] = o.Hops
	}
	return json.Marshal(toSerialize)
}

type NullableV202101beta1TraceProbe struct {
	value *V202101beta1TraceProbe
	isSet bool
}

func (v NullableV202101beta1TraceProbe) Get() *V202101beta1TraceProbe {
	return v.value
}

func (v *NullableV202101beta1TraceProbe) Set(val *V202101beta1TraceProbe) {
	v.value = val
	v.isSet = true
}

func (v NullableV202101beta1TraceProbe) IsSet() bool {
	return v.isSet
}

func (v *NullableV202101beta1TraceProbe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV202101beta1TraceProbe(val *V202101beta1TraceProbe) *NullableV202101beta1TraceProbe {
	return &NullableV202101beta1TraceProbe{value: val, isSet: true}
}

func (v NullableV202101beta1TraceProbe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV202101beta1TraceProbe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
