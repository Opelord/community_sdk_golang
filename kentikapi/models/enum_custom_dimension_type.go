// Code generated by "enumer -output enum_custom_dimension_type.go -type CustomDimensionType"; DO NOT EDIT.

//
package models

import (
	"fmt"
)

const _CustomDimensionTypeName = "stringuint32"

var _CustomDimensionTypeIndex = [...]uint8{0, 6, 12}

func (i CustomDimensionType) String() string {
	if i < 0 || i >= CustomDimensionType(len(_CustomDimensionTypeIndex)-1) {
		return fmt.Sprintf("CustomDimensionType(%d)", i)
	}
	return _CustomDimensionTypeName[_CustomDimensionTypeIndex[i]:_CustomDimensionTypeIndex[i+1]]
}

var _CustomDimensionTypeValues = []CustomDimensionType{0, 1}

var _CustomDimensionTypeNameToValueMap = map[string]CustomDimensionType{
	_CustomDimensionTypeName[0:6]:  0,
	_CustomDimensionTypeName[6:12]: 1,
}

// CustomDimensionTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func CustomDimensionTypeString(s string) (CustomDimensionType, error) {
	if val, ok := _CustomDimensionTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to CustomDimensionType values", s)
}

// CustomDimensionTypeValues returns all values of the enum
func CustomDimensionTypeValues() []CustomDimensionType {
	return _CustomDimensionTypeValues
}

// IsACustomDimensionType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i CustomDimensionType) IsACustomDimensionType() bool {
	for _, v := range _CustomDimensionTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
