/*
 * Cloud Export Admin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cloudexport

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// CloudExportAdminServiceApiService CloudExportAdminServiceApi service
type CloudExportAdminServiceApiService service

type ApiCloudExportAdminServiceCreateCloudExportRequest struct {
	ctx                                  _context.Context
	ApiService                           *CloudExportAdminServiceApiService
	v202101beta1CreateCloudExportRequest *V202101beta1CreateCloudExportRequest
}

func (r ApiCloudExportAdminServiceCreateCloudExportRequest) V202101beta1CreateCloudExportRequest(v202101beta1CreateCloudExportRequest V202101beta1CreateCloudExportRequest) ApiCloudExportAdminServiceCreateCloudExportRequest {
	r.v202101beta1CreateCloudExportRequest = &v202101beta1CreateCloudExportRequest
	return r
}

func (r ApiCloudExportAdminServiceCreateCloudExportRequest) Execute() (V202101beta1CreateCloudExportResponse, *_nethttp.Response, error) {
	return r.ApiService.CloudExportAdminServiceCreateCloudExportExecute(r)
}

/*
 * CloudExportAdminServiceCreateCloudExport Method for CloudExportAdminServiceCreateCloudExport
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCloudExportAdminServiceCreateCloudExportRequest
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceCreateCloudExport(ctx _context.Context) ApiCloudExportAdminServiceCreateCloudExportRequest {
	return ApiCloudExportAdminServiceCreateCloudExportRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return V202101beta1CreateCloudExportResponse
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceCreateCloudExportExecute(r ApiCloudExportAdminServiceCreateCloudExportRequest) (V202101beta1CreateCloudExportResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V202101beta1CreateCloudExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudExportAdminServiceApiService.CloudExportAdminServiceCreateCloudExport")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud_export/v202101beta1/exports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.v202101beta1CreateCloudExportRequest == nil {
		return localVarReturnValue, nil, reportError("v202101beta1CreateCloudExportRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v202101beta1CreateCloudExportRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["email"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-Email"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GooglerpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudExportAdminServiceDeleteCloudExportRequest struct {
	ctx        _context.Context
	ApiService *CloudExportAdminServiceApiService
	exportId   string
}

func (r ApiCloudExportAdminServiceDeleteCloudExportRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.CloudExportAdminServiceDeleteCloudExportExecute(r)
}

/*
 * CloudExportAdminServiceDeleteCloudExport Method for CloudExportAdminServiceDeleteCloudExport
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param exportId
 * @return ApiCloudExportAdminServiceDeleteCloudExportRequest
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceDeleteCloudExport(ctx _context.Context, exportId string) ApiCloudExportAdminServiceDeleteCloudExportRequest {
	return ApiCloudExportAdminServiceDeleteCloudExportRequest{
		ApiService: a,
		ctx:        ctx,
		exportId:   exportId,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceDeleteCloudExportExecute(r ApiCloudExportAdminServiceDeleteCloudExportRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudExportAdminServiceApiService.CloudExportAdminServiceDeleteCloudExport")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud_export/v202101beta1/exports/{export.id}"
	localVarPath = strings.Replace(localVarPath, "{"+"export.id"+"}", _neturl.PathEscape(parameterToString(r.exportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["email"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-Email"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GooglerpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudExportAdminServiceGetCloudExportRequest struct {
	ctx        _context.Context
	ApiService *CloudExportAdminServiceApiService
	exportId   string
}

func (r ApiCloudExportAdminServiceGetCloudExportRequest) Execute() (V202101beta1GetCloudExportResponse, *_nethttp.Response, error) {
	return r.ApiService.CloudExportAdminServiceGetCloudExportExecute(r)
}

/*
 * CloudExportAdminServiceGetCloudExport Method for CloudExportAdminServiceGetCloudExport
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param exportId
 * @return ApiCloudExportAdminServiceGetCloudExportRequest
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceGetCloudExport(ctx _context.Context, exportId string) ApiCloudExportAdminServiceGetCloudExportRequest {
	return ApiCloudExportAdminServiceGetCloudExportRequest{
		ApiService: a,
		ctx:        ctx,
		exportId:   exportId,
	}
}

/*
 * Execute executes the request
 * @return V202101beta1GetCloudExportResponse
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceGetCloudExportExecute(r ApiCloudExportAdminServiceGetCloudExportRequest) (V202101beta1GetCloudExportResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V202101beta1GetCloudExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudExportAdminServiceApiService.CloudExportAdminServiceGetCloudExport")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud_export/v202101beta1/exports/{export.id}"
	localVarPath = strings.Replace(localVarPath, "{"+"export.id"+"}", _neturl.PathEscape(parameterToString(r.exportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["email"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-Email"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GooglerpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudExportAdminServiceListCloudExportRequest struct {
	ctx        _context.Context
	ApiService *CloudExportAdminServiceApiService
}

func (r ApiCloudExportAdminServiceListCloudExportRequest) Execute() (V202101beta1ListCloudExportResponse, *_nethttp.Response, error) {
	return r.ApiService.CloudExportAdminServiceListCloudExportExecute(r)
}

/*
 * CloudExportAdminServiceListCloudExport Method for CloudExportAdminServiceListCloudExport
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCloudExportAdminServiceListCloudExportRequest
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceListCloudExport(ctx _context.Context) ApiCloudExportAdminServiceListCloudExportRequest {
	return ApiCloudExportAdminServiceListCloudExportRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 * @return V202101beta1ListCloudExportResponse
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceListCloudExportExecute(r ApiCloudExportAdminServiceListCloudExportRequest) (V202101beta1ListCloudExportResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V202101beta1ListCloudExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudExportAdminServiceApiService.CloudExportAdminServiceListCloudExport")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud_export/v202101beta1/exports"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["email"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-Email"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GooglerpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudExportAdminServicePatchCloudExportRequest struct {
	ctx                                 _context.Context
	ApiService                          *CloudExportAdminServiceApiService
	exportId                            string
	v202101beta1PatchCloudExportRequest *V202101beta1PatchCloudExportRequest
}

func (r ApiCloudExportAdminServicePatchCloudExportRequest) V202101beta1PatchCloudExportRequest(v202101beta1PatchCloudExportRequest V202101beta1PatchCloudExportRequest) ApiCloudExportAdminServicePatchCloudExportRequest {
	r.v202101beta1PatchCloudExportRequest = &v202101beta1PatchCloudExportRequest
	return r
}

func (r ApiCloudExportAdminServicePatchCloudExportRequest) Execute() (V202101beta1PatchCloudExportResponse, *_nethttp.Response, error) {
	return r.ApiService.CloudExportAdminServicePatchCloudExportExecute(r)
}

/*
 * CloudExportAdminServicePatchCloudExport Method for CloudExportAdminServicePatchCloudExport
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param exportId The internal cloud export identifier. This is Read-only and assigned by Kentik.
 * @return ApiCloudExportAdminServicePatchCloudExportRequest
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServicePatchCloudExport(ctx _context.Context, exportId string) ApiCloudExportAdminServicePatchCloudExportRequest {
	return ApiCloudExportAdminServicePatchCloudExportRequest{
		ApiService: a,
		ctx:        ctx,
		exportId:   exportId,
	}
}

/*
 * Execute executes the request
 * @return V202101beta1PatchCloudExportResponse
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServicePatchCloudExportExecute(r ApiCloudExportAdminServicePatchCloudExportRequest) (V202101beta1PatchCloudExportResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V202101beta1PatchCloudExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudExportAdminServiceApiService.CloudExportAdminServicePatchCloudExport")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud_export/v202101beta1/exports/{export.id}"
	localVarPath = strings.Replace(localVarPath, "{"+"export.id"+"}", _neturl.PathEscape(parameterToString(r.exportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.v202101beta1PatchCloudExportRequest == nil {
		return localVarReturnValue, nil, reportError("v202101beta1PatchCloudExportRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v202101beta1PatchCloudExportRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["email"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-Email"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GooglerpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCloudExportAdminServiceUpdateCloudExportRequest struct {
	ctx                                  _context.Context
	ApiService                           *CloudExportAdminServiceApiService
	exportId                             string
	v202101beta1UpdateCloudExportRequest *V202101beta1UpdateCloudExportRequest
}

func (r ApiCloudExportAdminServiceUpdateCloudExportRequest) V202101beta1UpdateCloudExportRequest(v202101beta1UpdateCloudExportRequest V202101beta1UpdateCloudExportRequest) ApiCloudExportAdminServiceUpdateCloudExportRequest {
	r.v202101beta1UpdateCloudExportRequest = &v202101beta1UpdateCloudExportRequest
	return r
}

func (r ApiCloudExportAdminServiceUpdateCloudExportRequest) Execute() (V202101beta1UpdateCloudExportResponse, *_nethttp.Response, error) {
	return r.ApiService.CloudExportAdminServiceUpdateCloudExportExecute(r)
}

/*
 * CloudExportAdminServiceUpdateCloudExport Method for CloudExportAdminServiceUpdateCloudExport
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param exportId The internal cloud export identifier. This is Read-only and assigned by Kentik.
 * @return ApiCloudExportAdminServiceUpdateCloudExportRequest
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceUpdateCloudExport(ctx _context.Context, exportId string) ApiCloudExportAdminServiceUpdateCloudExportRequest {
	return ApiCloudExportAdminServiceUpdateCloudExportRequest{
		ApiService: a,
		ctx:        ctx,
		exportId:   exportId,
	}
}

/*
 * Execute executes the request
 * @return V202101beta1UpdateCloudExportResponse
 */
func (a *CloudExportAdminServiceApiService) CloudExportAdminServiceUpdateCloudExportExecute(r ApiCloudExportAdminServiceUpdateCloudExportRequest) (V202101beta1UpdateCloudExportResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  V202101beta1UpdateCloudExportResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CloudExportAdminServiceApiService.CloudExportAdminServiceUpdateCloudExport")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/cloud_export/v202101beta1/exports/{export.id}"
	localVarPath = strings.Replace(localVarPath, "{"+"export.id"+"}", _neturl.PathEscape(parameterToString(r.exportId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.v202101beta1UpdateCloudExportRequest == nil {
		return localVarReturnValue, nil, reportError("v202101beta1UpdateCloudExportRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.v202101beta1UpdateCloudExportRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["email"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-Email"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["token"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["X-CH-Auth-API-Token"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GooglerpcStatus
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
