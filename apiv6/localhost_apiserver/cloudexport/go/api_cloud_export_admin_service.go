/*
 * Cloud Export Admin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 202101beta1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package cloudexportstub

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A CloudExportAdminServiceApiController binds http requests to an api service and writes the service results to the http response
type CloudExportAdminServiceApiController struct {
	service CloudExportAdminServiceApiServicer
}

// NewCloudExportAdminServiceApiController creates a default api controller
func NewCloudExportAdminServiceApiController(s CloudExportAdminServiceApiServicer) Router {
	return &CloudExportAdminServiceApiController{service: s}
}

// Routes returns all of the api route for the CloudExportAdminServiceApiController
func (c *CloudExportAdminServiceApiController) Routes() Routes {
	return Routes{
		{
			"ExportCreate",
			strings.ToUpper("Post"),
			"/cloud_export/v202101beta1/exports",
			c.ExportCreate,
		},
		{
			"ExportDelete",
			strings.ToUpper("Delete"),
			"/cloud_export/v202101beta1/exports/{export.id}",
			c.ExportDelete,
		},
		{
			"ExportGet",
			strings.ToUpper("Get"),
			"/cloud_export/v202101beta1/exports/{export.id}",
			c.ExportGet,
		},
		{
			"ExportList",
			strings.ToUpper("Get"),
			"/cloud_export/v202101beta1/exports",
			c.ExportList,
		},
		{
			"ExportPatch",
			strings.ToUpper("Patch"),
			"/cloud_export/v202101beta1/exports/{export.id}",
			c.ExportPatch,
		},
		{
			"ExportUpdate",
			strings.ToUpper("Put"),
			"/cloud_export/v202101beta1/exports/{export.id}",
			c.ExportUpdate,
		},
	}
}

// ExportCreate - Create Cloud Export.
func (c *CloudExportAdminServiceApiController) ExportCreate(w http.ResponseWriter, r *http.Request) {
	body := &V202101beta1CreateCloudExportRequest{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.ExportCreate(r.Context(), *body)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExportDelete - Delete an export.
func (c *CloudExportAdminServiceApiController) ExportDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	exportId := params["export.id"]

	result, err := c.service.ExportDelete(r.Context(), exportId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExportGet - Get information about an export.
func (c *CloudExportAdminServiceApiController) ExportGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	exportId := params["export.id"]

	result, err := c.service.ExportGet(r.Context(), exportId)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExportList - List Cloud Export.
func (c *CloudExportAdminServiceApiController) ExportList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ExportList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExportPatch - Patch an export.
func (c *CloudExportAdminServiceApiController) ExportPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	exportId := params["export.id"]

	body := &V202101beta1PatchCloudExportRequest{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.ExportPatch(r.Context(), exportId, *body)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ExportUpdate - Update an export.
func (c *CloudExportAdminServiceApiController) ExportUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	exportId := params["export.id"]

	body := &V202101beta1UpdateCloudExportRequest{}
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	result, err := c.service.ExportUpdate(r.Context(), exportId, *body)
	// If an error occurred, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
